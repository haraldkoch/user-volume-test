---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: '3'

vars:
  RENDER_MACHINE_SCRIPT: '{{.SCRIPTS_DIR}}/render-machine-config.sh'
  TALOS_MACHINE_FILE: '{{.TALOS_DIR}}/machineconfig.yaml.j2'
  TALOS_NODES_DIR: '{{.TALOS_DIR}}/nodes'
  TALOS_SCHEMATIC_FILE: '{{.TALOS_DIR}}/schematic.yaml'

tasks:

  apply-node:
    desc: Apply config to a node [NODE=required] [MODE=auto]
    cmd: |
      {{.RENDER_MACHINE_SCRIPT}} {{.TALOS_MACHINE_FILE}} {{.TALOS_NODES_DIR}}/{{.NODE}}.yaml.j2 \
        | talosctl --nodes {{.NODE}} apply-config --mode {{.MODE}} --file /dev/stdin {{if .INSECURE}}--insecure{{end}}
    vars:
      MODE: '{{.MODE | default "auto"}}'
      INSECURE:
        sh: talosctl --talosconfig {{.TALOS_DIR}}/talosconfig --nodes {{.NODE}} get machineconfig &> /dev/null || echo true
    requires:
      vars: [NODE]
    preconditions:
      - op whoami
      - talosctl --nodes {{.NODE}} get machineconfig
      - test -f {{.RENDER_MACHINE_SCRIPT}}
      - test -f {{.TALOS_MACHINE_FILE}}
      - test -f {{.TALOS_NODES_DIR}}/{{.NODE}}.yaml.j2
      - which minijinja-cli talosctl op yq

  apply-cluster:
    desc: Apply the Talos config on all nodes
    vars:
      NODES:
        sh: kubectl get nodes --output=jsonpath='{.items[*].metadata.name}'
    cmds:
      - for: { var: NODES }
        task:  apply-node
        vars:
          NODE: '{{.ITEM}}'

  upgrade-node:
    desc: Upgrade a node [NODE=required] [MODE=powercycle]
    cmd: talosctl --nodes {{.NODE}} upgrade --image="{{.FACTORY_IMAGE}}" --reboot-mode={{.MODE}} --timeout=10m
    vars:
      MODE: '{{.MODE | default "powercycle"}}'
      FACTORY_IMAGE:
        sh: minijinja-cli "{{.TALOS_DIR}}/machineconfig.yaml.j2" | yq -e '.machine.install.image // ""'
    requires:
      vars: [NODE]
    preconditions:
      - talosctl --nodes {{.NODE}} get machineconfig
      - test -f {{.TALOS_MACHINE_FILE}}
      - test -f {{.TALOS_NODES_DIR}}/{{.NODE}}.yaml.j2
      - which talosctl yq

  dashboard:
    desc: Display the Talos dashboard
    cmds:
      - talosctl dashboard
    preconditions:
      - test -f {{.TALOS_DIR}}/talosconfig
      - which talosctl

  upgrade-k8s:
    desc: Upgrade Kubernetes
    cmd: talosctl --nodes {{.CONTROLLER}} upgrade-k8s --to {{.VERSION}}
    vars:
      CONTROLLER:
        sh: talosctl config info --output yaml | yq --exit-status '.endpoints[0]'
    requires:
      vars: [VERSION]
    preconditions:
      - talosctl --nodes {{.CONTROLLER}} get machineconfig
      - which talosctl yq

  reboot-node:
    desc: Reboot a node [NODE=required]
    cmd: talosctl --nodes {{.NODE}} reboot --mode=powercycle
    requires:
      vars: [NODE]
    preconditions:
      - talosctl --nodes {{.NODE}} get machineconfig
      - which talosctl

  reboot-cluster:
    desc: Reboot whole cluster
    prompt: This will reboot all of the cluster nodes. Are you sure you want to continue?
    cmd: talosctl --nodes {{.NODES}} reboot --mode=powercycle
    vars:
      NODES:
        sh: talosctl config info --output yaml | yq --exit-status '.nodes | join (",")'
    preconditions:
      - talosctl --nodes {{.NODE}} get machineconfig
      - which talosctl yq

  shutdown-cluster:
    desc: Shutdown whole cluster
    prompt: Shutdown the Talos cluster ... continue?
    cmd: talosctl shutdown --nodes {{.NODES}} --force
    vars:
      NODES:
        sh: talosctl config info --output yaml | yq --exit-status '.nodes | join (",")'
    preconditions:
      - talosctl --nodes {{.NODES}} get machineconfig
      - which talosctl yq

  reset-node:
    desc: Reset a node [NODE=required]
    prompt: Reset Talos node '{{.NODE}}' ... continue?
    cmd: talosctl reset --nodes {{.NODE}} --system-labels-to-wipe STATE --system-labels-to-wipe EPHEMERAL --graceful=false --reboot --user-disks-to-wipe u-extra
    requires:
      vars: [NODE]
    preconditions:
      - talosctl --nodes {{.NODE}} get machineconfig
      - which talosctl

  reset-cluster:
    desc: Reset whole cluster
    prompt: Reset the Talos cluster ... continue?
    cmd: talosctl reset --nodes {{.NODES}} --graceful=false --reboot --user-disks-to-wipe u-extra
    vars:
      NODES:
        sh: talosctl config info --output yaml | yq --exit-status '.nodes | join (",")'
    preconditions:
      - talosctl --nodes {{.NODES}} get machineconfig
      - which talosctl yq

  generate-kubeconfig:
    desc: Generate kubeconfig
    cmd: talosctl kubeconfig --nodes {{.CONTROLLER}} --force
    vars:
      CONTROLLER:
        sh: talosctl config info --output yaml | yq --exit-status '.endpoints[0]'
    preconditions:
      - talosctl --nodes {{.CONTROLLER}} get machineconfig
      - which talosctl yq

  generate-schematic:
    desc: Generate Schematic ID [VERSION=required]
    cmd: |
      echo "Schematic ID: {{.SCHEMATIC}}"
      curl -o {{.TALOS_DIR}}/talos-{{.VERSION}}-{{substr 0 8 .SCHEMATIC}}.iso \
          "https://factory.talos.dev/image/{{.SCHEMATIC}}/{{.VERSION}}/metal-amd64.iso"
    vars:
      SCHEMATIC:
        sh: curl --silent -X POST --data-binary @{{.TALOS_SCHEMATIC_FILE}} https://factory.talos.dev/schematics | jq --raw-output '.id'
    requires:
      vars: [VERSION]
    status:
      - test -f {{.TALOS_DIR}}/talos-{{.VERSION}}-{{substr 0 8 .SCHEMATIC}}.iso
    preconditions:
      - test -f {{.TALOS_SCHEMATIC_FILE}}
      - which curl jq
